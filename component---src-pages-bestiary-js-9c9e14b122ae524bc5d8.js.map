{"version":3,"sources":["webpack:///./src/applications/bestiary/data/creature-types.js","webpack:///./src/components/flex-layout.js","webpack:///./src/applications/bestiary/components/creature-filter-checkbox.js","webpack:///./src/applications/bestiary/components/creature-filter-form.js","webpack:///./src/applications/bestiary/data/creature-data.js","webpack:///./src/applications/bestiary/utils/filter-creatures.js","webpack:///./src/applications/bestiary/components/creature-list.js","webpack:///./src/applications/bestiary/views/all-creatures.js","webpack:///./src/applications/bestiary/app.js","webpack:///./src/pages/bestiary.js","webpack:///./src/components/button.js","webpack:///./node_modules/core-js/modules/es6.string.big.js"],"names":["getCreatureTypes","data","_","creatures","edges","map","edge","node","frontmatter","type","uniq","value","FlexRow","styled","div","FlexCol","attrs","props","sm","md","lg","breakpoints","med","small","CreatureCheckboxOuter","label","HiddenCheckbox","input","CreatureCheckbox","checked","css","CreatureFilterCheckbox","onChange","toUpper","CreatureFilterContainer","CreatureTypeSelection","NameSearch","CreatureFilterForm","React","useContext","BestiaryFilterStore","filterState","dispatch","creatureTypes","key","includes","e","payload","filterTypeAction","target","name","placeholder","style","width","onClick","getCreatureData","id","filterCreatures","filter","nameRegex","RegExp","split","term","join","creature","checkName","test","checkType","length","CreatureLink","Link","CreatureLinkLeft","CreatureLinkRight","xsmall","CreatureListItem","to","path","state","fromBestiary","startCase","cr","CreatureListGroup","AllCreatures","creatureData","creaturesByCR","decimal","crDecimal","toString","push","getCreaturesByCR","useEffect","keys","sort","a","b","category","BestiaryApp","BestiaryPage","title","Button","big","ButtonEventHandler","as","children","ButtonExternalLink","href","createHTML","this"],"mappings":"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","file":"component---src-pages-bestiary-js-9c9e14b122ae524bc5d8.js","sourcesContent":["import { useStaticQuery, graphql } from \"gatsby\"\r\nimport _ from \"lodash\"\r\n\r\nconst BestiaryTypes = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      creatures: allMarkdownRemark(\r\n        filter: { frontmatter: { template: { eq: \"creature\" }, title: {} } }\r\n      ) {\r\n        edges {\r\n          node {\r\n            frontmatter {\r\n              type\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  return _(data.creatures.edges)\r\n    .map((edge) => edge.node.frontmatter.type)\r\n    .uniq()\r\n    .value()\r\n}\r\n\r\nexport const getCreatureTypes = () => {\r\n  let creatureTypes = BestiaryTypes()\r\n  return creatureTypes\r\n}\r\n","import styled from \"styled-components\"\r\nimport breakpoints from \"./breakpoints\"\r\n\r\nconst FlexRow = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-left: -4px;\r\n  margin-right: -4px;\r\n\r\n  & + & {\r\n    margin-top: 16px;\r\n  }\r\n`\r\n\r\nconst FlexCol = styled.div.attrs((props) => ({\r\n  sm: props.sm ? props.sm : 12,\r\n  md: props.md ? props.md : props.sm ? props.sm : 12,\r\n  lg: props.lg ? props.lg : props.md ? props.md : props.sm ? props.sm : 12  \r\n}))`\r\n  width: ${(props) => `calc(100% / 12 * ${props.lg} - 8px)`};\r\n  margin-left: 4px;\r\n  margin-right: 4px;\r\n  margin-bottom: 16px;\r\n\r\n  @media ${breakpoints.med} {\r\n    width: ${(props) => `calc(100% / 12 * ${props.md} - 8px)`};\r\n  }\r\n\r\n  @media ${breakpoints.small} {\r\n    width: ${(props) => `calc(100% / 12 * ${props.sm} - 8px)`};\r\n  }\r\n`\r\n\r\nexport { FlexRow, FlexCol }\r\n","import React from \"react\"\r\nimport styled, { css } from \"styled-components\"\r\nimport _ from \"lodash\"\r\n\r\nconst CreatureCheckboxOuter = styled.label`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  box-sizing: border-box;\r\n  cursor: pointer;\r\n`\r\n\r\nconst HiddenCheckbox = styled.input.attrs({ type: \"checkbox\" })`\r\n  display: none !important;\r\n`\r\n\r\nconst CreatureCheckbox = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 64px;\r\n  background-color: #323232;\r\n  border: 2px solid transparent;\r\n  border-radius: 3px;\r\n  box-sizing: border-box;\r\n\r\n  & span {\r\n    color: #fff;\r\n    bottom: 0;\r\n    font-size: 1.2rem;\r\n  }\r\n\r\n  ${props => props.checked && css`\r\n    border-color: #896F08;\r\n\r\n    & span {\r\n      color: #f4d03e;\r\n    }\r\n  `}\r\n`\r\n\r\nconst CreatureFilterCheckbox = ({ checked = null, label = \"\", onChange = null }) => (\r\n  <CreatureCheckboxOuter>\r\n    <HiddenCheckbox onChange={onChange} checked={checked} />\r\n    <CreatureCheckbox checked={checked}>\r\n      <span>{_.toUpper(label)}</span>\r\n    </CreatureCheckbox>\r\n  </CreatureCheckboxOuter>\r\n)\r\n\r\nexport default CreatureFilterCheckbox\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport _ from \"lodash\"\r\nimport breakpoints from \"../../../components/breakpoints\"\r\n\r\nimport { BestiaryFilterStore } from \"../../../stores/bestiary-filter-store\"\r\nimport { getCreatureTypes } from \"../data/creature-types\"\r\n\r\nimport { FlexRow, FlexCol } from \"../../../components/flex-layout\"\r\nimport CreatureFilterCheckbox from \"./creature-filter-checkbox\"\r\nimport { ButtonEventHandler } from \"../../../components/button\"\r\n\r\nconst CreatureFilterContainer = styled.div`\r\n  margin-bottom: 56px;\r\n`\r\n\r\nconst CreatureTypeSelection = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n\r\n  & > * {\r\n    width: calc((100% / 6) - 4px);\r\n    margin-bottom: 4px;\r\n  }\r\n\r\n  @media ${breakpoints.med} {\r\n    & > * {\r\n      width: calc((100% / 4) - 4px);\r\n    }\r\n  }\r\n\r\n  @media ${breakpoints.small} {\r\n    & > * {\r\n      width: calc((100% / 2) - 4px);\r\n    }\r\n  }\r\n`\r\n\r\nconst NameSearch = styled.input`\r\n  height: 48px;\r\n  width: 100%;\r\n  background-color: #fff;\r\n  border: 1px solid #d1d1d1;\r\n  border-radius: 3px;\r\n  margin: 0px;\r\n`\r\n\r\nconst CreatureFilterForm = () => {\r\n  const { filterState, dispatch } = React.useContext(BestiaryFilterStore)\r\n  const creatureTypes = getCreatureTypes()\r\n\r\n  const filterTypeAction = (type, checked) => {\r\n    return dispatch({\r\n      type: \"FILTER_TYPE\",\r\n      payload: {\r\n        type: type,\r\n        checked: checked\r\n      }\r\n    })\r\n  }\r\n\r\n  const filterNameAction = (name) => {\r\n    return dispatch({\r\n      type: \"FILTER_NAME\",\r\n      payload: name\r\n    })\r\n  }\r\n\r\n  const resetFilterAction = () => {\r\n    return dispatch({\r\n      type: \"RESET_FILTER\",\r\n      payload: null\r\n    })\r\n  }\r\n\r\n  return (\r\n    <CreatureFilterContainer>\r\n      <FlexRow>\r\n        <FlexCol md={12}>\r\n          <CreatureTypeSelection>\r\n            {creatureTypes.map((type) => {\r\n              return (\r\n                <CreatureFilterCheckbox\r\n                  key={`creature-type-${type}`}\r\n                  label={type}\r\n                  checked={filterState.type.includes(type)}\r\n                  onChange={(e) => {\r\n                    filterTypeAction(type, e.target.checked)\r\n                  }}\r\n                />\r\n              )\r\n            })}\r\n          </CreatureTypeSelection>\r\n        </FlexCol>\r\n        <FlexCol lg={9} md={8} sm={12}>\r\n          <NameSearch\r\n            type='text'\r\n            value={filterState.name}\r\n            placeholder='Search Creature Names'\r\n            onChange={(e) => filterNameAction(e.target.value)}\r\n          />\r\n        </FlexCol>\r\n        <FlexCol lg={3} md={4} sm={12}>\r\n          <ButtonEventHandler style={{ width: \"100%\" }} onClick={() => resetFilterAction()}>\r\n            Reset Filters\r\n          </ButtonEventHandler>\r\n        </FlexCol>\r\n      </FlexRow>\r\n    </CreatureFilterContainer>\r\n  )\r\n}\r\n\r\nexport default CreatureFilterForm\r\n","import { useStaticQuery, graphql } from \"gatsby\"\r\nimport _ from \"lodash\"\r\n\r\nconst BestiaryData = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      creatures: allMarkdownRemark(filter: { frontmatter: { template: { eq: \"creature\" } } }) {\r\n        edges {\r\n          node {\r\n            id\r\n            frontmatter {\r\n              name: title\r\n              type\r\n              cr\r\n              crDecimal\r\n              template\r\n              path\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  return _(data.creatures.edges)\r\n    .map((edge) => {\r\n      return {\r\n        id: edge.node.id,\r\n        ...edge.node.frontmatter\r\n      }\r\n    })\r\n    .value()\r\n}\r\n\r\nexport const getCreatureData = () => {\r\n  let creatureData = BestiaryData()\r\n  return creatureData\r\n}\r\n","import _ from \"lodash\"\r\n\r\nconst filterCreatures = (creatures, filter) => {\r\n  let nameRegex = RegExp(\r\n    filter.name\r\n      .split(/['\\s,-]+/)\r\n      .map((term) => `(${term})`)\r\n      .join(`.*`),\r\n    \"gi\"\r\n  )\r\n\r\n  let filteredCreatures = _.filter(creatures, (creature) => {\r\n    let checkName = nameRegex.test(creature.name)\r\n    let checkType = filter.type.length > 0 ? _.includes(filter.type, creature.type) : true\r\n\r\n    if (checkName && checkType) {\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  })\r\n\r\n  return filteredCreatures\r\n}\r\n\r\nexport default filterCreatures\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { Link } from \"gatsby\"\r\nimport _ from \"lodash\"\r\nimport breakpoints from \"../../../components/breakpoints\"\r\n\r\nconst CreatureLink = styled(Link)`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  background-color: #fbfaf9;\r\n  padding: 20px 32px;\r\n  margin-bottom: 8px;\r\n  border: 1px solid #ede3d4;\r\n  border-radius: 3px;\r\n  color: #2c3e50;\r\n  text-decoration: none;\r\n  box-shadow: 0px 1px 0px rgba(0, 0, 0, 0.12);\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background-color: #ffffff;\r\n    color: #2c3e50;\r\n    border-color: #cf3e2e;\r\n\r\n    & h4 {\r\n      color: #cf3e2e;\r\n    }\r\n  }\r\n\r\n  &:active {\r\n    background-color: #f6f5f4;\r\n  }\r\n`\r\n\r\nconst CreatureLinkLeft = styled.div`\r\n  display: inline-block;\r\n  margin-right: 8px;\r\n\r\n  & h4 {\r\n    font-weight: 600;\r\n  }\r\n`\r\n\r\nconst CreatureLinkRight = styled.div`\r\n  display: inline-block;\r\n  margin-left: 8px;\r\n\r\n  & span {\r\n    margin-left: 24px;\r\n    color: #a7adb4;\r\n    font-size: 12px;\r\n\r\n    @media ${breakpoints.xsmall} {\r\n      display: block;\r\n      margin-left: 0px;\r\n      text-align: right;\r\n    }\r\n  }\r\n`\r\n\r\nconst CreatureListItem = ({ creature }) => (\r\n  <CreatureLink to={creature.path} state={{ fromBestiary: true }}>\r\n    <CreatureLinkLeft>\r\n      <h4>{creature.name}</h4>\r\n    </CreatureLinkLeft>\r\n    <CreatureLinkRight>\r\n      <span>{_.startCase(creature.type)}</span>\r\n      <span>CR {creature.cr}</span>\r\n    </CreatureLinkRight>\r\n  </CreatureLink>\r\n)\r\n\r\nconst CreatureListGroup = styled.div`\r\n  width: 100%;\r\n\r\n  & h3 {\r\n    margin-top: 48px;\r\n    margin-left: 4px;\r\n    color: #c0392b;\r\n  }\r\n`\r\n\r\nexport { CreatureListGroup, CreatureListItem }\r\n","import React from \"react\"\r\nimport _ from \"lodash\"\r\n\r\nimport { BestiaryFilterStore } from \"../../../stores/bestiary-filter-store\"\r\nimport { getCreatureData } from \"../data/creature-data\"\r\n\r\nimport filterCreatures from \"../utils/filter-creatures\"\r\nimport { CreatureListGroup, CreatureListItem } from \"../components/creature-list\"\r\n\r\nconst getCreaturesByCR = (creatures) => {\r\n  let creaturesByCR = {}\r\n\r\n  creatures.map((creature) => {\r\n    let decimal = creature.crDecimal.toString()\r\n    if (!creaturesByCR[decimal]) {\r\n      creaturesByCR[decimal] = {\r\n        cr: creature.cr,\r\n        crDecimal: decimal,\r\n        creatures: []\r\n      }\r\n    }\r\n    creaturesByCR[decimal].creatures.push(creature)\r\n  })\r\n\r\n  return creaturesByCR\r\n}\r\n\r\nconst AllCreatures = () => {\r\n  const { filterState } = React.useContext(BestiaryFilterStore)\r\n  const creatureData = getCreatureData()\r\n\r\n  let creatures = filterCreatures(creatureData, filterState)\r\n  let creaturesByCR = getCreaturesByCR(creatures)\r\n\r\n  React.useEffect(() => {\r\n    // console.log(state)\r\n  })\r\n\r\n  return (\r\n    <>\r\n      {_.keys(creaturesByCR)\r\n        .sort((a, b) => a - b)\r\n        .map((category) => (\r\n          <CreatureListGroup key={creaturesByCR[category].cr}>\r\n            <h3>CR {creaturesByCR[category].cr}</h3>\r\n            {_.map(creaturesByCR[category].creatures, (creature) => (\r\n              <CreatureListItem key={creature.id} creature={creature} />\r\n            ))}\r\n          </CreatureListGroup>\r\n        ))}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AllCreatures\r\n","import React from \"react\"\r\n\r\nimport { Layout, LayoutInner } from \"../../components/layout\"\r\nimport CreatureFilterForm from \"./components/creature-filter-form\"\r\nimport AllCreatures from \"./views/all-creatures\"\r\n\r\nconst BestiaryApp = () => (\r\n  <Layout>\r\n    <LayoutInner>\r\n      <CreatureFilterForm />\r\n      <AllCreatures />\r\n    </LayoutInner>\r\n  </Layout>\r\n)\r\n\r\nexport default BestiaryApp\r\n","import React from \"react\"\r\nimport SEO from \"../components/seo\"\r\n\r\nimport BestiaryApp from \"../applications/bestiary/app\"\r\n\r\nconst BestiaryPage = () => (\r\n  <>\r\n    <SEO title='Bestiary' />\r\n    <BestiaryApp />\r\n  </>\r\n)\r\n\r\nexport default BestiaryPage\r\n","import React from \"react\"\r\nimport styled, { css } from \"styled-components\"\r\nimport { Link } from \"gatsby\"\r\nimport breakpoints from \"./breakpoints\"\r\n\r\nconst Button = styled.a`\r\n  display: inline-block;\r\n  padding: 13px 16px;\r\n  margin: 0px;\r\n  background-color: #c0392b;\r\n  border: 1px solid #b13428;\r\n  border-radius: 3px\r\n;\r\n  color: #fff;\r\n  font-size: 1.4rem;\r\n  text-decoration: none;\r\n  text-transform: uppercase;\r\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.12);\r\n  box-sizing: border-box;\r\n\r\n  & + & {\r\n    margin-left: 8px;\r\n  }\r\n\r\n  &:hover,\r\n  &:focus {\r\n    background-color: #cf3e2e;\r\n    color: #fff;\r\n  }\r\n\r\n  &:active {\r\n    background-color: #b13428;\r\n    border-color: #a33025;\r\n  }\r\n\r\n  ${(props) => props.big && css`\r\n    padding: 20px 32px;\r\n    border-color: #d85c4f;\r\n    font-size: 1.6rem;\r\n\r\n    &:active {\r\n      border-color: #cf3e2e;\r\n    }\r\n  `}\r\n\r\n  @media ${breakpoints.xsmall} {\r\n    display: block;\r\n    width: 100%;\r\n\r\n    & + & {\r\n      margin-top: 8px;\r\n      margin-left: 0px;\r\n    }\r\n  }\r\n`\r\n\r\nexport const ButtonEventHandler = (props) => (\r\n  <Button as={`button`} big={props.big} {...props}>\r\n    {props.children}\r\n  </Button>\r\n)\r\n\r\nexport const ButtonRouteLink = (props) => (\r\n  <Button as={Link} to={props.to} big={props.big} {...props}>\r\n    {props.children}\r\n  </Button>\r\n)\r\n\r\nexport const ButtonExternalLink = (props) => (\r\n  <Button href={props.href} target='_blank' big={props.big} {...props}>\r\n    {props.children}\r\n  </Button>\r\n)\r\n","'use strict';\n// B.2.3.3 String.prototype.big()\nrequire('./_string-html')('big', function (createHTML) {\n  return function big() {\n    return createHTML(this, 'big', '', '');\n  };\n});\n"],"sourceRoot":""}